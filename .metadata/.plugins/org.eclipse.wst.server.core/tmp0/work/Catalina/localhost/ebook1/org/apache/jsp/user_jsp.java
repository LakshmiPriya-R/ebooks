/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.7
 * Generated at: 2018-04-24 09:45:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.pdfbox.multipdf.PDFMergerUtility;
import java.util.*;
import java.io.*;
import javax.xml.xquery.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import org.w3c.dom.*;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDDocument;
import net.sf.saxon.xqj.SaxonXQDataSource;

public final class user_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


public static File makefile(String name, int pS,int pE,int n)throws IOException
{
	int i;
	
	File pdf= new File(name);
	System.out.println("NAME: "+name);
	
	PDDocument doc= PDDocument.load(pdf);
	PDPage pg = new PDPage();
	PDDocument ContentDoc= new PDDocument();
	for (i=pS;i<=pE;i++)
	{
		//System.out.println("PS: "+Integer.toString(pS));
		pg = (PDPage)doc.getPages().get(i-1);
		ContentDoc.addPage(pg);
	}	
	ContentDoc.save("/Users/yashpal/Desktop/Project/project_data/custom_books/Result"+Integer.toString(n)+".pdf");
	System.out.println("Printing extracted contents.pdf");
	ContentDoc.close();
	File file = new File("/Users/yashpal/Desktop/Project/project_data/custom_books/Result"+Integer.toString(n)+".pdf");
	doc.close();
	return file;
}


public static void Merge(ArrayList<File>docs) throws IOException
{
	PDFMergerUtility PDFmerger = new PDFMergerUtility();
	PDFmerger.setDestinationFileName("/Users/yashpal/Desktop/Project/project_data/custom_books/Merged.pdf");
	int i;
	for(i=0;i<docs.size();i++)
		PDFmerger.addSource(docs.get(i));
    PDFmerger.mergeDocuments();
    System.out.println("Documents merged");
	
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("org.w3c.dom");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.xml.xquery");
    _jspx_imports_packages.add("javax.xml.transform.stream");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.xml.parsers");
    _jspx_imports_packages.add("javax.xml.transform.dom");
    _jspx_imports_packages.add("javax.xml.transform");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("net.sf.saxon.xqj.SaxonXQDataSource");
    _jspx_imports_classes.add("org.apache.pdfbox.pdmodel.PDDocument");
    _jspx_imports_classes.add("org.apache.pdfbox.pdmodel.PDPage");
    _jspx_imports_classes.add("org.apache.pdfbox.multipdf.PDFMergerUtility");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>JKL/User</title>\n");
      out.write("<link rel = \"stylesheet\" type = \"text/css\" href = \"start_style.css\" />\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

String book = request.getParameter("book");
String st = request.getParameter("start");
int start = Integer.parseInt(st);
String en = request.getParameter("end");
int end = Integer.parseInt(en);


File fin = new File("/Users/yashpal/Desktop/Project/project_data/custom_books/test.xml");

DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
Document doc = docBuilder.parse(fin);
Element root = doc.getDocumentElement();



String qry0 = "for $x in doc('/Users/yashpal/Desktop/Project/project_data/books.xml')/books/book where $x/title = '"+book+"' return $x/author/text()";
String qry1 = "for $x in doc('/Users/yashpal/Desktop/Project/project_data/books.xml')/books/book where $x/title = '"+book+"' return $x/first/text()";
String qry2 = "for $x in doc('/Users/yashpal/Desktop/Project/project_data/books.xml')/books/book where $x/title = '"+book+"' return $x/last/text()";
String qry3 = "for $x in doc('/Users/yashpal/Desktop/Project/project_data/books.xml')/books/book where $x/title = '"+book+"' return $x/price/text()";

		
XQDataSource ds = new SaxonXQDataSource();
XQConnection conn = ds.getConnection();
XQPreparedExpression exp = conn.prepareExpression(qry0);
XQResultSequence result = exp.executeQuery();


int bookstart = 0, bookend = 0, bookprice = 0;
String auth = "";

while (result.next()) 
{
   
   auth = result.getItemAsString(null);
   
}


exp = conn.prepareExpression(qry1);
result = exp.executeQuery();

while (result.next()) 
{
   String str = result.getItemAsString(null);
   bookend = Integer.parseInt(str);
   
}

exp = conn.prepareExpression(qry2);
result = exp.executeQuery();

while (result.next()) 
{
   String str = result.getItemAsString(null);
   bookend = Integer.parseInt(str);
   
}

exp = conn.prepareExpression(qry3);
result = exp.executeQuery();

while (result.next()) 
{
   String str = result.getItemAsString(null);
   bookprice = Integer.parseInt(str);
   
}


if(start < bookstart || end > bookend)
{
	out.println("<h3>Incorrect page number entries</h3>");
	out.println("<a href = 'user.html'>Re-enter</a>");
}
else
{
	Element newbook = doc.createElement("book");
	root.appendChild(newbook);
	
	int pagecount = end-start+1;
	int cost = pagecount*bookprice;

	Element name = doc.createElement("name");
	Element author = doc.createElement("author");
	Element startpage = doc.createElement("start");
	Element endpage = doc.createElement("end");
	Element bookcost = doc.createElement("cost"); 
			
	name.appendChild(doc.createTextNode(book));
	author.appendChild(doc.createTextNode(auth));
	startpage.appendChild(doc.createTextNode(String.valueOf(start)));
	endpage.appendChild(doc.createTextNode(String.valueOf(end)));
	bookcost.appendChild(doc.createTextNode(String.valueOf(cost)));

	newbook.appendChild(name);
	newbook.appendChild(author);
	newbook.appendChild(startpage);
	newbook.appendChild(endpage);
	newbook.appendChild(bookcost);
	

	TransformerFactory factory = TransformerFactory.newInstance();
	Transformer transformer = factory.newTransformer();
	DOMSource domSource = new DOMSource(doc);
	StreamResult streamResult = new StreamResult(new File("/Users/yashpal/Desktop/Project/project_data/custom_books/test.xml"));
	transformer.transform(domSource, streamResult);

	DOMSource source = new DOMSource(doc);
	
	out.println("<h3>Successfully selected</h3> <br />");
	out.println("<a href = 'user.html'>Add more pages</a><br />");
	out.println("<a href = 'user1.jsp'>Finish creating custom book</a>");
	
}



      out.write("\n");
      out.write("<br />\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
